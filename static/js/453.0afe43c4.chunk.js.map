{"version":3,"file":"static/js/453.0afe43c4.chunk.js","mappings":"sNACA,EAA2B,+BAA3B,EAAuE,iCAAvE,EAAsH,kCAAtH,EAA4K,wCAA5K,EAAiO,iCAAjO,EAA+Q,iCAA/Q,EAA4T,gCAA5T,EAAmW,2BAAnW,EAAuY,6BAAvY,EAA8a,8B,qECOjaA,EAAe,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,OAAQC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACnDC,GAAWC,EAAAA,EAAAA,MACXC,EAAe,WACnBF,GAASG,EAAAA,EAAAA,GAAaL,GACvB,EACD,OACE,iBAAKM,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAUC,I,y+BAAWC,IAAI,eACzC,gBAAKH,UAAWC,EAAeC,IAAKE,EAAQD,IAAI,eAChD,gBAAKH,UAAWC,KAChB,gBAAKD,UAAWC,EAAYC,IAAKG,EAAKF,IAAI,eAC1C,iBAAKH,UAAWC,EAAhB,WACE,eAAGD,UAAWC,EAAd,UAA+BT,EAA/B,cACA,eAAGQ,UAAWC,EAAd,UAA+BR,EAA/B,gBACCE,GACC,mBACEK,UAAWC,EACXK,KAAK,SACLC,QAAST,EAHX,wBAQA,mBACEE,UAAWC,EACXK,KAAK,SACLC,QAAST,EAHX,yBAWT,EC1CYU,EAAa,SAACC,GAAD,OAAWA,EAAMC,IAAjB,EACbC,EAAkB,SAACF,GAAD,OAAWA,EAAMG,SAAjB,ECA/B,EAA2B,6BAA3B,EAAqE,+BAArE,EAAwH,sCAAxH,EAA2K,+BCA3K,EAA6B,+B,uCCOhBC,EAAa,WACtB,IAAQC,GAAUC,EAAAA,EAAAA,IAAYP,GAAtBM,MACR,GAAmCC,EAAAA,EAAAA,IAAYJ,GAAvCK,EAAR,EAAQA,YAAYC,EAApB,EAAoBA,WAEdrB,GAAWC,EAAAA,EAAAA,MAWjB,OAVmBiB,EAAMI,OAAS,GAAKF,EAAcF,EAAMI,SAWvC,mBAASlB,UAAcC,EAAiBK,KAAO,SAASC,QATtD,WAElB,GAAIO,EAAMI,QAAUF,EAChB,OAAOG,IAAAA,OAAAA,QAAwB,8BAEnCvB,GAASwB,EAAAA,EAAAA,OACTxB,GAASyB,EAAAA,EAAAA,GAAYJ,GACxB,EAEmB,uBAEvB,E,oBCjBYK,EAAa,WAAO,IAAD,IACtBR,GAAUC,EAAAA,EAAAA,IAAYP,GAAtBM,MACFS,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,QAAM,oBAACH,EAASd,aAAV,aAAC,EAAgBkB,YAAjB,QAAyB,KAEnD,OACE,iCACE,SAAC,KAAD,CAASC,GAAIH,EAAYI,QAAzB,UACE,mBAAQ7B,UAAWC,EAAnB,wBAEF,eAAID,UAAWC,EAAf,qBACA,eAAID,UAAWC,EAAf,SACGa,GACCA,EAAMgB,KAAI,SAAAC,GACR,OACE,eAAI/B,UAAWC,EAAf,UACE,SAACV,EAAD,CACEC,OAAQuC,EAAKvC,OACbC,UAAWsC,EAAKtC,UAChBC,QAASqC,EAAKC,GACdrC,SAAUoC,EAAKpC,YALiBoC,EAAKC,GAS5C,OAEL,SAACnB,EAAD,MAGL,ECdD,EAfmB,WACjB,IAAMjB,GAAWC,EAAAA,EAAAA,MACTiB,GAAUC,EAAAA,EAAAA,IAAYP,GAAtBM,MACAG,GAAeF,EAAAA,EAAAA,IAAYJ,GAA3BM,WAUR,OARAgB,EAAAA,EAAAA,YAAU,WACJhB,GAAc,IAChBrB,GAASyB,EAAAA,EAAAA,GAAYJ,IACrBrB,GAASwB,EAAAA,EAAAA,OAGZ,GAAE,CAACxB,EAAUqB,KAEP,8BAAGH,EAAMI,OAAS,IAAK,SAACI,EAAD,KAC/B,C","sources":["webpack://react-homework-template/./src/components/TweetElement/TweetElement.module.css?e2da","components/TweetElement/TweetElement.jsx","redux/selectors.js","webpack://react-homework-template/./src/components/TweetsList/TweetsList.module.css?2ae8","webpack://react-homework-template/./src/components/ButtonLoad/ButtonLoad.module.css?eb19","components/ButtonLoad/ButtonLoad.jsx","components/TweetsList/TweetsList.jsx","pages/TweetsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"tweetBox\":\"TweetElement_tweetBox__XtQgZ\",\"mediumLine\":\"TweetElement_mediumLine__PrWll\",\"tweetButton\":\"TweetElement_tweetButton__6EbJO\",\"tweetButtonActive\":\"TweetElement_tweetButtonActive__CvG6P\",\"tweetsInfo\":\"TweetElement_tweetsInfo__N2sts\",\"followInfo\":\"TweetElement_followInfo__0YZHe\",\"backImage\":\"TweetElement_backImage__gMNtg\",\"logo\":\"TweetElement_logo__Fz8Sw\",\"avatar\":\"TweetElement_avatar__DDEwi\",\"descBox\":\"TweetElement_descBox__NpU+A\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { activeButton } from '../../redux/auth/authSlice';\nimport css from './TweetElement.module.css';\nimport design from '../../images/design.png';\nimport boy from '../../images/boy.png';\nimport logo from '../../images/logo.png';\n\nexport const TweetElement = ({ tweets, followers, idTweet, isActive }) => {\n  const dispatch = useDispatch();\n  const handleButton = () => {\n    dispatch(activeButton(idTweet));\n  };\n  return (\n    <div className={css.tweetBox}>\n      <img className={css.logo} src={logo} alt=\"backImage\" />\n      <img className={css.backImage} src={design} alt=\"backImage\" />\n      <div className={css.mediumLine} />\n      <img className={css.avatar} src={boy} alt=\"backImage\" />\n      <div className={css.descBox}>\n        <p className={css.tweetsInfo}>{tweets} TWEETS</p>\n        <p className={css.followInfo}>{followers} FOLLOWERS</p>\n        {isActive ? (\n          <button\n            className={css.tweetButtonActive}\n            type=\"button\"\n            onClick={handleButton}\n          >\n            Following\n          </button>\n        ) : (\n          <button\n            className={css.tweetButton}\n            type=\"button\"\n            onClick={handleButton}\n          >\n            Follow\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nTweetElement.propTypes = {\n  tweets: PropTypes.number.isRequired,\n  followers: PropTypes.number.isRequired,\n  idTweet: PropTypes.number.isRequired,\n  isActiv:PropTypes.bool.isRequired,\n};\n","export const selectAuth = (state) => state.auth;\nexport const selectTweetCard = (state) => state.tweetCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"itemList\":\"TweetsList_itemList__b7oKl\",\"tweetsItem\":\"TweetsList_tweetsItem__HHZhO\",\"mainTweetsHeading\":\"TweetsList_mainTweetsHeading__+aNL7\",\"buttonBack\":\"TweetsList_buttonBack__AzPdn\"};","// extracted by mini-css-extract-plugin\nexport default {\"buttonLoad\":\"ButtonLoad_buttonLoad__bcZww\"};","import css from './ButtonLoad.module.css'\nimport Notiflix from 'notiflix'\nimport { useDispatch } from 'react-redux'\nimport { useSelector } from 'react-redux'\nimport { selectAuth , selectTweetCard} from '../../redux/selectors'\nimport { addPage } from '../../redux/tweetCard/tweetCardSlice'\nimport { fetchTweets } from 'redux/auth/authOperations'\n\nexport const ButtonLoad = () => {\n    const { items } = useSelector(selectAuth)\n    const { totalAmount,numberPage } = useSelector(selectTweetCard)\n    \n    const dispatch = useDispatch()\n    const showButton = items.length > 1 && totalAmount > items.length;\n\n    const addNumberPage = () => {\n    \n        if (items.length >= totalAmount) {\n            return Notiflix.Notify.failure(\"You don't have more tweets\");\n            }\n        dispatch(addPage())\n        dispatch(fetchTweets(numberPage));\n    }\n    return (\n         showButton &&  < button className = { css.buttonLoad } type = 'button' onClick = { addNumberPage } > Load More</button >\n    )\n}","import { TweetElement } from '../TweetElement/TweetElement';\nimport { useSelector } from 'react-redux';\nimport { selectAuth } from '../../redux/selectors';\nimport css from './TweetsList.module.css';\nimport { ButtonLoad } from '../ButtonLoad/ButtonLoad';\nimport { useRef } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\n\nexport const TweetsList = () => {\n  const { items } = useSelector(selectAuth);\n  const location = useLocation();\n  const backLinkRef = useRef(location.state?.from ?? '/');\n\n  return (\n    <>\n      <NavLink to={backLinkRef.current}>\n        <button className={css.buttonBack}>Go back</button>\n      </NavLink>\n      <h2 className={css.mainTweetsHeading}>Tweets</h2>\n      <ul className={css.itemList}>\n        {items &&\n          items.map(item => {\n            return (\n              <li className={css.tweetsItem} key={item.id}>\n                <TweetElement\n                  tweets={item.tweets}\n                  followers={item.followers}\n                  idTweet={item.id}\n                  isActive={item.isActive}\n                />\n              </li>\n            );\n          })}\n      </ul>\n      <ButtonLoad />\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { TweetsList } from '../components/TweetsList/TweetsList';\nimport { fetchTweets } from '../redux/auth/authOperations';\nimport { useSelector } from 'react-redux';\nimport { selectAuth, selectTweetCard } from '../redux/selectors';\n\nimport { addPage } from 'redux/tweetCard/tweetCardSlice';\n\nconst TweetsPage = () => {\n  const dispatch = useDispatch();\n  const { items } = useSelector(selectAuth);\n  const { numberPage } = useSelector(selectTweetCard);\n\n  useEffect(() => {\n    if (numberPage <= 1) {\n      dispatch(fetchTweets(numberPage));\n      dispatch(addPage());\n    }\n    return;\n  }, [dispatch, numberPage]);\n\n  return <>{items.length > 0 && <TweetsList />}</>;\n};\nexport default TweetsPage;\n"],"names":["TweetElement","tweets","followers","idTweet","isActive","dispatch","useDispatch","handleButton","activeButton","className","css","src","alt","design","boy","type","onClick","selectAuth","state","auth","selectTweetCard","tweetCard","ButtonLoad","items","useSelector","totalAmount","numberPage","length","Notiflix","addPage","fetchTweets","TweetsList","location","useLocation","backLinkRef","useRef","from","to","current","map","item","id","useEffect"],"sourceRoot":""}